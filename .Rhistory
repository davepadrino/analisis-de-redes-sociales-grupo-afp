#procesamiento
# create.project('Asignacion_1')
#Needed <- c("tm","dplyr","sm")
#install.packages(Needed, dependencies = TRUE)
#Needed <- c("tm", "SnowballCC", "RColorBrewer", "ggplot2", "wordcloud", "biclust", "cluster", "igraph", "fpc")
#install.packages(Needed, dependencies=TRUE)
#install.packages("FactoMineR")
#setwd("C:/Users/Alex/Documents/Asignacion_1")
load.project()
load(file = "data/tw.RData")
txt <- paste(tw$text, collapse = " ")
txt <- tw$text
# lee el documento UTF-8 y lo convierte a ASCII
txt = iconv(txt, to="ASCII//TRANSLIT")
# construye un corpus
corpus <- Corpus(VectorSource(txt), readerControl = list(language = "es"))
unwanted_array = list('á'='a', 'é'='e', 'í'='i','ó'='o','ú'='u', 'ü'='u')
##elimina acentos y caracteres especiales
acento <- function(x) {
x <- chartr(paste(names(unwanted_array), collapse=''),
paste(unwanted_array, collapse=''),x)
}
removeURL <- function(x) gsub("(f|ht)tp(s?)(://)?(.*)[.][a-z]+['/']+[A-Za-z0-9]+", "", x)
doc<- tm_map(corpus, removeURL)
removeURL2 <- function(x) gsub("https(:?)(/?)(/?)", "", x)
doc <- tm_map(doc, removeURL2)
remove6d <- function(x) gsub("(#6)D?d?", "", x)
doc <- tm_map(doc, tolower)
doc <- tm_map(doc, remove6d)
doc <- tm_map(doc,removePunctuation)
doc<- tm_map(doc,stripWhitespace)
doc <- tm_map(doc, tolower)
doc <- tm_map(doc, removeWords, c(stopwords("spanish"), "rt"))
doc <- tm_map(doc, acento)
doc <- tm_map(doc, PlainTextDocument) #This tells R to treat your preprocessed documents as text documents.
dtm <- DocumentTermMatrix(doc,control = list(wordLengths = c(2, Inf)))
tdm <- TermDocumentMatrix(doc,control = list(wordLengths = c(2, Inf)))
freq <- sort(colSums(as.matrix(dtm)), decreasing=TRUE)
m <- as.matrix(dtm)
wf <- data.frame(word=names(freq), freq=freq)
library(ProjectTemplate)
library(tm)
library(dplyr)
library(wordcloud)
library(ggplot2)
require(sm)
load.project()
ProjectTemplate::migrate.project()
load(file = "data/tw.RData")
setwd("C:/Users/Alex/Documents/Asignacion_1")
load.project()
load(file = "data/tw.RData")
txt <- paste(tw$text, collapse = " ")
txt <- tw$text
# lee el documento UTF-8 y lo convierte a ASCII
txt = iconv(txt, to="ASCII//TRANSLIT")
# construye un corpus
corpus <- Corpus(VectorSource(txt), readerControl = list(language = "es"))
unwanted_array = list('á'='a', 'é'='e', 'í'='i','ó'='o','ú'='u', 'ü'='u')
##elimina acentos y caracteres especiales
acento <- function(x) {
x <- chartr(paste(names(unwanted_array), collapse=''),
paste(unwanted_array, collapse=''),x)
}
removeURL <- function(x) gsub("(f|ht)tp(s?)(://)?(.*)[.][a-z]+['/']+[A-Za-z0-9]+", "", x)
doc<- tm_map(corpus, removeURL)
removeURL2 <- function(x) gsub("https(:?)(/?)(/?)", "", x)
doc <- tm_map(doc, removeURL2)
remove6d <- function(x) gsub("(#6)D?d?", "", x)
doc <- tm_map(doc, tolower)
doc <- tm_map(doc, remove6d)
doc <- tm_map(doc,removePunctuation)
doc<- tm_map(doc,stripWhitespace)
doc <- tm_map(doc, tolower)
doc <- tm_map(doc, removeWords, c(stopwords("spanish"), "rt"))
doc <- tm_map(doc, acento)
doc <- tm_map(doc, PlainTextDocument) #This tells R to treat your preprocessed documents as text documents.
dtm <- DocumentTermMatrix(doc,control = list(wordLengths = c(2, Inf)))
tdm <- TermDocumentMatrix(doc,control = list(wordLengths = c(2, Inf)))
freq <- sort(colSums(as.matrix(dtm)), decreasing=TRUE)
m <- as.matrix(dtm)
wf <- data.frame(word=names(freq), freq=freq)
library(fpc)
tdm2 <- removeSparseTerms(tdm, sparse = 0.983)
m2 <- as.matrix(tdm2)
d <- dist(t(m2), method="euclidian")
kfit <- kmeans(d, 2)
clusplot(as.matrix(d), kfit$cluster, color=T, shade=T, labels=2, lines=0)
?clusplot
library(fpc)
library(cluster)
tdm2 <- removeSparseTerms(tdm, sparse = 0.983)
m2 <- as.matrix(tdm2)
d <- dist(m2, method="euclidian")
kfit <- kmeans(d, 2)
clusplot(as.matrix(d), kfit$cluster, color=T, shade=T, labels=2, lines=0)
?hclust
library(cluster)
tdm2 <- removeSparseTerms(tdm, sparse = 0.983)
m2 <- as.matrix(tdm2)
d = dist(m2 , method="euclidian")
modelo <- hclust(d^2, method = "ward")
plot(modelo)
rect.hclust(modelo, k =5)
library(fpc)
library(cluster)
tdm2 <- removeSparseTerms(tdm, sparse = 0.983)
m2 <- as.matrix(tdm2)
d <- dist(m2, method="euclidian")
kfit <- kmeans(d, 2)
kfit
clusplot(as.matrix(d), kfit$cluster, color=T, shade=T, labels=2, lines=0)
kfit
kfit center
kfit("centers")
library(cluster)
tdm2 <- removeSparseTerms(tdm, sparse = 0.983)
m2 <- as.matrix(tdm2)
d = dist(m2 , method="euclidian")
modelo <- hclust(d^2, method = "ward")
plot(modelo)
rect.hclust(modelo, k =5)
library(cluster)
tdm2 <- removeSparseTerms(tdm, sparse = 0.983)
m2 <- as.matrix(tdm2)
d = dist(m2 , method="euclidian")
modelo <- hclust(d, method = "ward")
plot(modelo)
rect.hclust(modelo, k =5)
library(cluster)
tdm2 <- removeSparseTerms(tdm, sparse = 0.983)
m2 <- as.matrix(tdm2)
d = dist(m2 , method="euclidian")
modelo <- hclust(d^2, method = "ward")
plot(modelo)
rect.hclust(modelo, k =5)
library(cluster)
tdm2 <- removeSparseTerms(tdm, sparse = 0.983)
m2 <- as.matrix(tdm2)
d = dist(m2 , method="euclidian")
modelo <- hclust(d, method = "ward")
plot(modelo)
rect.hclust(modelo, k =5)
library(cluster)
tdm2 <- removeSparseTerms(tdm, sparse = 0.983)
m2 <- as.matrix(tdm2)
d = dist(m2 , method="euclidian")
modelo <- hclust(d^2, method = "ward")
plot(modelo)
rect.hclust(modelo, k =5)
library('FactoMineR')
tdm2 <- removeSparseTerms(tdm, sparse = 0.965)
m2 <- as.matrix(tdm2)
modelo <- PCA(t(m2), scale.unit = TRUE, ncp = 7, graph = FALSE)
plot(modelo, axes = c(1, 2), choix = "ind", col.ind = "red", label="none",new.plot = TRUE)
plot(modelo, axes = c(1, 2), choix = "var", col.var = "blue",new.plot = TRUE)
plot(modelo, axes = c(1, 2), choix = "ind", col.ind = "red", label="none",new.plot = TRUE)
plot(modelo, axes = c(1, 2),col.ind = "red", label="none",new.plot = TRUE)
library('FactoMineR')
tdm2 <- removeSparseTerms(tdm, sparse = 0.965)
m2 <- as.matrix(tdm2)
modelo <- PCA(t(m2), scale.unit = TRUE, ncp = 7, graph = FALSE)
plot(modelo, axes = c(1, 2),col.ind = "red", label="none",new.plot = TRUE)
plot(modelo, axes = c(1, 2), col.var = "blue",new.plot = TRUE)
plot(modelo, axes = c(1, 2),col.ind = "red", label="none",new.plot = TRUE)
plot(modelo, axes = c(1, 2),choix = "var", col.var = "blue",new.plot = TRUE)
library('FactoMineR')
tdm2 <- removeSparseTerms(tdm, sparse = 0.965)
m2 <- as.matrix(tdm2)
modelo <- PCA(t(m2), scale.unit = TRUE, ncp = 7, graph = FALSE)
plot(modelo, axes = c(1, 2),col.ind = "red", label="none",new.plot = TRUE)
plot(modelo, axes = c(1, 2),"red", label="none",new.plot = TRUE)
library('FactoMineR')
tdm2 <- removeSparseTerms(tdm, sparse = 0.965)
m2 <- as.matrix(tdm2)
modelo <- PCA(t(m2), scale.unit = TRUE, ncp = 7, graph = FALSE)
plot(modelo, axes = c(1, 2),col.ind = "red", label="none",new.plot = TRUE)
plot(modelo, axes = c(1, 2),choix = "var", col.var = "blue",new.plot = TRUE)
plot(modelo, axes = c(1, 2),col.ind = "red", label="none",new.plot = TRUE)
plot(modelo, axes = c(1, 2),col = "red", label="none",new.plot = TRUE)
?plot.PCA
plot(modelo, axes = c(1, 2),col.ind.sup="blue",new.plot = TRUE)
?plot.PCA
plot(modelo, axes = c(1, 2),col.ind ="blue",new.plot = TRUE)
plot(modelo, axes = c(1, 2),choix = "var", col.var = "blue",new.plot = TRUE)
?plot.PCA
plot(modelo, axes = c(1, 2),col = "yellow", label="none",new.plot = TRUE)
plot(modelo, axes = c(1, 2),col = "red", label="none",new.plot = TRUE)
plot(modelo, axes = c(1, 2),choix = "ind",col = "red", label="none",new.plot = TRUE)
library('FactoMineR')
tdm2 <- removeSparseTerms(tdm, sparse = 0.965)
m2 <- as.matrix(tdm2)
modelo <- PCA(t(m2), scale.unit = TRUE, ncp = 7, graph = FALSE)
plot(modelo, axes = c(1, 2),col = "red", label="none",new.plot = TRUE)
plot(modelo, axes = c(1, 2),choix = "var", col.var = "blue",new.plot = TRUE)
plot(modelo, axes = c(1, 2),col = "red", label="none",new.plot = TRUE)
?plot.PCA
plot(modelo, axes = c(1, 2),choix ="ind",col.ind = "red", label="none",new.plot = TRUE)
?plot.PCA
plot(modelo, axes = c(1, 2),choix ="ind",col.ind = "red",new.plot = TRUE)
plot(modelo, axes = c(1, 2),choix ="ind",col.ind = "red", label="none",new.plot = TRUE)
?plot.PCA
library(cluster)
tdm2 <- removeSparseTerms(tdm, sparse = 0.5)
m2 <- as.matrix(tdm2)
d = dist(m2 , method="euclidian")
model <- hclust(d^2, method = "ward")
plot(model)
rect.hclust(model, k =5)
library(cluster)
tdm2 <- removeSparseTerms(tdm, sparse = 0.5)
m2 <- as.matrix(tdm2)
d = dist(m2 , method="euclidian")
model <- hclust(d^2, method = "ward")
d = dist(m2 , method="euclidian")
model <- hclust(d^2, method = "ward.D2")
library(cluster)
tdm2 <- removeSparseTerms(tdm, sparse = 0.5)
m2 <- as.matrix(tdm2)
d = dist(m2 , method="euclidian")
model <- hclust(d^2, method = "centroid")
plot(model)
rect.hclust(model, k =5)
model <- hclust(d^2, method = "centroid")
?hclust
library(cluster)
tdm2 <- removeSparseTerms(tdm, sparse = 0.5)
m2 <- as.matrix(tdm2)
d = dist(m2 , method="euclidian")
model <- hclust(d, method = "ward.D")
plot(model)
rect.hclust(model, k =5)
library(cluster)
tdm2 <- removeSparseTerms(tdm, sparse = 0.5)
m2 <- as.matrix(tdm2)
d = dist(m2 , method="euclidian")
model <- hclust(d, method = "ward.D")
model <- hclust(d, method = "ward.D2")
d = dist(m2 , method="euclidian")
model <- hclust(d^2, method = "ward.D")
plot(model)
rect.hclust(model, k =5)
library(cluster)
tdm2 <- removeSparseTerms(tdm, sparse = 0.5)
m2 <- as.matrix(tdm2)
d = dist(m2 , method="euclidian")
model<- hclust(d^2, method = "ward.D")
library(cluster)
tdm2 <- removeSparseTerms(tdm, sparse = 0.9)
m2 <- as.matrix(tdm2)
d = dist(m2 , method="euclidian")
model<- hclust(d^2, method = "ward.D")
plot(model)
rect.hclust(model, k =5)
library(cluster)
tdm2 <- removeSparseTerms(tdm, sparse = 0.9)
m2 <- as.matrix(tdm2)
d = dist(m2 , method="euclidian")
model<- hclust(d^2, method = "ward.D")
plot(model)
rect.hclust(model, k =2)
library(cluster)
tdm2 <- removeSparseTerms(tdm, sparse = 0.9)
m2 <- as.matrix(tdm2)
d = dist(m2 , method="euclidian")
#model<- hclust(d^2, method = "ward.D")
model<- hclust(d, method = "ward.D2")
plot(model)
rect.hclust(model, k =2)
library(cluster)
tdm2 <- removeSparseTerms(tdm, sparse = 0.9)
m2 <- as.matrix(tdm2)
d = dist(m2 , method="euclidian")
model<- hclust(d^2, method = "ward.D")
#model<- hclust(d, method = "ward.D2")
plot(model)
rect.hclust(model, k =2)
library(cluster)
tdm2 <- removeSparseTerms(tdm, sparse = 0.9)
m2 <- as.matrix(tdm2)
d = dist(m2 , method="euclidian")
model<- hclust(d^2, method = "ward.D")
#model<- hclust(d, method = "ward.D2")
plot(model)
rect.hclust(model, k =3)
library(cluster)
tdm2 <- removeSparseTerms(tdm, sparse = 0.932)
m2 <- as.matrix(tdm2)
d = dist(m2 , method="euclidian")
#model<- hclust(d^2, method = "ward.D")
model<- hclust(d, method = "ward.D2")
plot(model)
rect.hclust(model, k =3)
library(cluster)
tdm2 <- removeSparseTerms(tdm, sparse = 0.9542)
m2 <- as.matrix(tdm2)
d = dist(m2 , method="euclidian")
#model<- hclust(d^2, method = "ward.D")
model<- hclust(d, method = "ward.D2")
plot(model)
rect.hclust(model, k =3)
library(cluster)
tdm2 <- removeSparseTerms(tdm, sparse = 0.98)
m2 <- as.matrix(tdm2)
d = dist(m2 , method="euclidian")
#model<- hclust(d^2, method = "ward.D")
model<- hclust(d, method = "ward.D2")
plot(model)
rect.hclust(model, k =3)
library(cluster)
tdm2 <- removeSparseTerms(tdm, sparse = 0.95)
m2 <- as.matrix(tdm2)
d = dist(m2 , method="euclidian")
#model<- hclust(d^2, method = "ward.D")
model<- hclust(d, method = "ward.D2")
plot(model)
rect.hclust(model, k =3)
library(cluster)
tdm2 <- removeSparseTerms(tdm, sparse = 0.955)
m2 <- as.matrix(tdm2)
d = dist(m2 , method="euclidian")
#model<- hclust(d^2, method = "ward.D")
model<- hclust(d, method = "ward.D2")
plot(model)
rect.hclust(model, k =3)
library('FactoMineR')
tdm2 <- removeSparseTerms(tdm, sparse = 0.965)
m2 <- as.matrix(tdm2)
model <- PCA(t(m2), scale.unit = TRUE, ncp = 7, graph = FALSE)
plot(model, axes = c(1, 2),choix ="ind",col.ind = "red", label="none",new.plot = TRUE)
plot(modelo, axes = c(1, 2),choix = "var", col.var = "blue",new.plot = TRUE)
library('FactoMineR')
tdm2 <- removeSparseTerms(tdm, sparse = 0.5)
m2 <- as.matrix(tdm2)
model <- PCA(t(m2), scale.unit = TRUE, ncp = 7, graph = FALSE)
plot(model, axes = c(1, 2),choix ="ind",col.ind = "red", label="none",new.plot = TRUE)
plot(modelo, axes = c(1, 2),choix = "var", col.var = "blue",new.plot = TRUE)
library('FactoMineR')
tdm2 <- removeSparseTerms(tdm, sparse = 0.776)
m2 <- as.matrix(tdm2)
model <- PCA(t(m2), scale.unit = TRUE, ncp = 7, graph = FALSE)
plot(model, axes = c(1, 2),choix ="ind",col.ind = "red", label="none",new.plot = TRUE)
plot(modelo, axes = c(1, 2),choix = "var", col.var = "blue",new.plot = TRUE)
library('FactoMineR')
tdm2 <- removeSparseTerms(tdm, sparse = 0.965)
m2 <- as.matrix(tdm2)
model <- PCA(t(m2), scale.unit = TRUE, ncp = 7, graph = FALSE)
plot(model, axes = c(1, 2),choix ="ind",col.ind = "red", label="none",new.plot = TRUE)
plot(modelo, axes = c(1, 2),choix = "var", col.var = "blue",new.plot = TRUE)
library('FactoMineR')
tdm2 <- removeSparseTerms(tdm, sparse = 0.955)
m2 <- as.matrix(tdm2)
model <- PCA(t(m2), scale.unit = TRUE, ncp = 7, graph = FALSE)
plot(model, axes = c(1, 2),choix ="ind",col.ind = "red", label="none",new.plot = TRUE)
plot(modelo, axes = c(1, 2),choix = "var", col.var = "blue",new.plot = TRUE)
library(fpc)
library(cluster)
tdm2 <- removeSparseTerms(tdm, sparse = 0.955)
m2 <- as.matrix(tdm2)
d <- dist(m2, method="euclidian")
kfit <- kmeans(d, 2)
kfit
clusplot(as.matrix(d), kfit$cluster, color=T, shade=T, labels=2, lines=0)
library('FactoMineR')
tdm2 <- removeSparseTerms(tdm, sparse = 0.955)
m2 <- as.matrix(tdm2)
model <- PCA(m2, scale.unit = TRUE, ncp = 7, graph = FALSE)
plot(model, axes = c(1, 2),choix ="ind",col.ind = "red", label="none",new.plot = TRUE)
plot(modelo, axes = c(1, 2),choix = "var", col.var = "blue",new.plot = TRUE)
plot(model, axes = c(1, 2),choix ="ind",col.ind = "red", label="none",new.plot = TRUE)
library('FactoMineR')
tdm2 <- removeSparseTerms(tdm, sparse = 0.955)
m2 <- as.matrix(tdm2)
model <- PCA(t(m2), scale.unit = TRUE, ncp = 7, graph = FALSE)
plot(model, axes = c(1, 2),choix ="ind",col.ind = "red", label="none",new.plot = TRUE)
plot(modelo, axes = c(1, 2),choix = "var", col.var = "blue",new.plot = TRUE)
plot(model, axes = c(1, 2),choix ="ind",col.ind = "red", label="none",new.plot = TRUE)
?PCA
model <- PCA(t(m2), ncp = 7, graph = FALSE)
plot(model, axes = c(1, 2),choix ="ind",col.ind = "red", label="none",new.plot = TRUE)
?PCA
model <- PCA(t(m2), ncp = 7, )
plot(model, axes = c(1, 2),choix ="ind",col.ind = "red", label="none",new.plot = TRUE)
model <- PCA(t(m2), ncp = 7)
plot(modelo, axes = c(1, 2),choix = "var", col.var = "blue",new.plot = TRUE)
?PCA
model <- PCA(t(m2), ncp = 7, axes = c(1,2))
?PCA
model <- PCA(t(m2), ncp = 7, axes = c(1,2))
plot(model, axes = c(1, 2),choix ="ind",col.ind = "red", label="none",new.plot = TRUE)
paste?
?paste
?paste
library('ProjectTemplate')
library('tm')
library('data.table')
library('FactoMineR')
library('cluster')
setwd("C:/Users/Alex/Documents/Asignacion_1")
load.project()
load(file ="data/preprocesamiento.RData")
tdm <- preprocesamiento$tdm
library('ProjectTemplate')
library('tm')
library('data.table')
library('FactoMineR')
library('cluster')
setwd("C:/Users/Alex/Documents/Asignacion_1")
load.project()
load(file ="data/preprocesamiento.RData")
tdm <- preprocesamiento$tdm
aux <- load(file ="data/preprocesamiento.RData")
tdm <- aux$tdm
preprocesamiento$tdm
tw$text
load(file = "data/tw.RData")
fuente <- tw$text
# lee el documento UTF-8 y lo convierte a ASCII
fuente = iconv(txt, to="ASCII//TRANSLIT")
# construye un corpus
corpus <- Corpus(VectorSource(fuente), readerControl = list(language = "es"))
unwanted_array = list('á'='a', 'é'='e', 'í'='i','ó'='o','ú'='u', 'ü'='u')
##elimina acentos y caracteres especiales
acento <- function(x) {
x <- chartr(paste(names(unwanted_array), collapse=''),
paste(unwanted_array, collapse=''),x)
}
removeURL <- function(x) gsub("(f|ht)tp(s?)(://)?(.*)[.][a-z]+['/']+[A-Za-z0-9]+", "", x)
doc<- tm_map(corpus, removeURL)
removeURL2 <- function(x) gsub("https(:?)(/?)(/?)", "", x)
doc <- tm_map(doc, removeURL2)
remove6d <- function(x) gsub("(#6)D?d?", "", x)
doc <- tm_map(doc, tolower)
doc <- tm_map(doc, remove6d)
doc <- tm_map(doc,removePunctuation)
doc<- tm_map(doc,stripWhitespace)
doc <- tm_map(doc, tolower)
doc <- tm_map(doc, removeWords, c(stopwords("spanish"), "rt"))
doc <- tm_map(doc, acento)
doc <- tm_map(doc, PlainTextDocument) #This tells R to treat your preprocessed documents as text documents.
dtm <- DocumentTermMatrix(doc,control = list(wordLengths = c(2, Inf)))
tdm <- TermDocumentMatrix(doc,control = list(wordLengths = c(2, Inf)))
save (dtm,tdm,file="data/preprocesamiento.RData")
freq <- sort(colSums(as.matrix(dtm)), decreasing=TRUE)
wf <- data.frame(word=names(freq), freq=freq)
#head(wf)
#necesito guardar el tdm y leerlo para el procesamiento
#si es posible guardar también el dtm
##--------------------PROCESAMIENTO------------------------------#
library(cluster)
library(fpc)
library(FactoMineR)
#Hierarchal Clustering
#First calculate distance between words & then cluster them according to similarity.
tdm2 <- removeSparseTerms(tdm, sparse = 0.955)
m2 <- as.matrix(tdm2)
d = dist(m2 , method="euclidian")
#model<- hclust(d^2, method = "ward.D")
model<- hclust(d, method = "ward.D2")
plot(model)
rect.hclust(model, k =3)
aux <- load(file ="data/preprocesamiento.RData")
tdm <- preprocesamiento$dtm
aux <- load(file ="data/preprocesamiento.RData")
tdm <- aux$tdm
tdm <- aux
tdm
aux <- load(file ="data/preprocesamiento.RData")
tdm <- aux[1]
tdm <- aux[0]
tdm <- aux[1]
dtm <- aux[0]
freq <- sort(colSums(as.matrix(dtm)), decreasing=TRUE)
aux[0]
aux[1]
aux[2]
aux <- load(file ="data/preprocesamiento.RData")
tdm <- aux[2]
dtm <- aux[1]
freq <- sort(colSums(as.matrix(dtm)), decreasing=TRUE)
dtm
inspect(dtm)
dtm <- DocumentTermMatrix(doc,control = list(wordLengths = c(2, Inf)))
tdm <- TermDocumentMatrix(doc,control = list(wordLengths = c(2, Inf)))
dtm
tdm2 <- removeSparseTerms(tdm, sparse = 0.955)
m2 <- as.matrix(tdm2)
d = dist(m2 , method="euclidian")
#model<- hclust(d^2, method = "ward.D")
model<- hclust(d, method = "ward.D2")
plot(model)
rect.hclust(model, k =3)
?t
# library(ggplot2)
# p <- ggplot(subset(wf, freq>150), aes(word, freq))
# p <- p + geom_bar(stat="identity")
# p <- p + theme(axis.text.x=element_text(angle=45, hjust=1))
# p
library(ggplot2)
p <- ggplot(subset(wf, freq>150), aes(word, freq))
p <- p + geom_bar(stat="identity")
p <- p + theme(axis.text.x=element_text(angle=45, hjust=1))
p
library(ggplot2)
p <- ggplot(subset(wf, freq>200), aes(word, freq))
p <- p + geom_bar(stat="identity")
p <- p + theme(axis.text.x=element_text(angle=45, hjust=1))
p
?PCA
library(workcloud)
set.seed(142)
wordcloud(names(freq), freq, min.freq=200,colors=brewer.pal(6, "Dark2"))
